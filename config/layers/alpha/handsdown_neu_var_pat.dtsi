/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/* = ⇧ =   34 Keys - Hands Down neu - variante Pat
    ╭──────────────────╮ ╭───────────────╮
    │ W  F  M  P  V    │ │ /  .  J  '  Z │
    │ R  S  N  T  B    │ │ ,  E  A  I  H │
    │ X  C  L  D  G    │ │ -  U  O  Y  K │
    ╰────────╮ ⇧ CapsW │ │⌫ -L1- ╭──────╯
             ╰─────────╯ ╰────────╯         */
/*     Chorded Letters - 34 Keys - Hands Down neu - variante Pat
    ╭──────────────╮ ╭─────────────────╮
    │ Qu           │ │                 │
    │ / \          │ │                 │
    │ W  F  _  _  _│ │_  _     _  _  _ │
    │ _  _  _  _  _│ │_  E -Ä- A  _  _ │
    │              │ │   │ \           │
    │              │ │   Ü  Ö          │
    │              │ │   │    \        │
    │ _  _  _  _  _│ │_  U     O  _  _ │
    ╰────────╮ _  _│ │_  _ ╭───────────╯
             ╰─────╯ ╰─────╯         
*/   
 
// LEFT SIDE
// TOP 
#define P_W LTP
#define P_F LTR
#define P_M LTM
#define P_P LTII
#define P_V LTIO
// MIDDLE
#define P_R LMP
#define P_S LMR
#define P_N LMM
#define P_T LMII
#define P_B LMIO
// BOTTOM
#define P_X LBP
#define P_C LBR
#define P_L LBM
#define P_D LBII
#define P_G LBIO
// THUMB
#define P_SHIFT LTI
#define P_REP LTO

// RIGHT SIDE
// TOP 
#define P_SLASH RTIO
#define P_DOT RTII
#define P_J RTM
#define P_GRAVE RTR
#define P_Z RTP
// MIDDLE
#define P_COMMA RMIO
#define P_A RMII
#define P_E RMM
#define P_I RMR
#define P_H RMP
// BOTTOM
#define P_MINUS RBIO
#define P_U RBII
#define P_O RBM
#define P_Y RBR
#define P_K RBP
// THUMB
#define P_BACKSPACE RTO
#define P_LAYER1 RTI

&caps_word {
   continue-list = <UNDERSCORE MINUS BACKSPACE>;
};
&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
};
/*           34 Keys
 ╭──────────────╮ ╭──────────────╮
 │ 0  1  2  3  4│ │ 5  6  7  8  9│
 │10 11 12 13 14│ │15 16 17 18 19│
 │20 21 22 23 24│ │25 26 27 28 29│
 ╰────────╮30 31│ │32 33╭────────╯
          ╰─────╯ ╰─────╯         */
/*    34 Keys - Hands Down neu
 https://sites.google.com/alanreiser.com/handsdown/home/hands-down-neu?authuser=0
 ╭───────────────╮ ╭─────────────────╮
 │ w  f  m  p  v │ │ /  .  q  "  '  z│
 │ r  s  n  t  b │ │ ,  a  e  i  h  j│
 │ x  c  l  d  g │ │ -  u  o  y  k   │     
 ╰─────────╮,; .:│ │ ␣  ⏎╭───────────╯
           ╰─────╯ ╰─────╯         
*/
/ {
/*     34 Keys - Hands Down neu - variante Pat
 ╭────────────────╮ ╭───────────────╮
 │ w  f  m  p  v  │ │ /  .  j  '  z │
 │ r  s  n  t  b  │ │ ,  a  e  i  h │
 │ x  c  l  d  g  │ │ -  u  o  y  k │
 ╰────────╮ ⇧ REP │ │ ␣ -L0- ╭──────╯
          ╰───────╯ ╰────────╯         
*/
/* = ⇧ =   34 Keys - Hands Down neu - variante Pat
    ╭──────────────────╮ ╭───────────────╮
    │ W  F  M  P  V    │ │ │  :  J  "  Z │
    │ R  S  N  T  B    │ │ ;  A  E  I  H │
    │ X  C  L  D  G    │ │ _  U  O  Y  K │
    ╰────────╮ ⇧ CapsW │ │ ⌫ -L1- ╭──────╯
             ╰─────────╯ ╰────────╯         */
/*     Chorded Letters - 34 Keys - Hands Down neu - variante Pat
    ╭──────────────╮ ╭─────────────────╮
    │ Qu           │ │                 │
    │ / \          │ │                 │
    │ W  F  _  _  _│ │_  _     _  _  _ │
    │ _  _  _  _  _│ │_  E -Ä- A  _  _ │
    │              │ │   │ \           │
    │              │ │   Ü  Ö          │
    │              │ │   │    \        │
    │ _  _  _  _  _│ │_  U     O  _  _ │
    ╰────────╮ _  _│ │_  _ ╭───────────╯
             ╰─────╯ ╰─────╯         
*/   
      // combos {
      //    compatible = "zmk,combos";
         // COMBO(tab, &kp TAB, TLR TLM)
         // COMBO(shift, &skq LSHFT, TRM TRR)
         // COMBO(ctrl, &sk LCTL, BLR BLM)
         // COMBO(backspace, &kp BSPC, BRM BRR)
         // COMBO(cmd, &sk LCMD, LTI LTO)
         // COMBO(opt, &sk LALT, RTO RTI)
         // COMBO(qu, &macro_m_QU, LTP LTR)
         //COMBO(z, &kp Z, MLP MLM)
         //COMBO_LONG(capsword, &caps_word, MLIO MRIO)
      // };
      keymap {
         compatible = "zmk,keymap";
         hands_down_neu {
            bindings = <
//╭─────┬─────┬─────┬─────┬──────────────────────╮╭───────────────┬──────────────┬──────┬───────────┬──────╮
   &kp W &kp F &kp M &kp P  &kp V                  &mm_slh_pipe     &mm_dot_colon  &kp J  &mm_quotes  &kp Z
//├─────┼─────┼─────┼─────┼──────────────────────┤├───────────────┼──────────────┼──────┼───────────┼──────┤
   &kp R &kp S &kp N &kp T  /* &td_s_B */ &kp B                  &mm_comma_semi   &kp A          &kp E  &kp I       &kp H
//├─────┼─────┼─────┼─────┼──────────────────────┤├───────────────┼──────────────┼──────┼───────────┼──────┤
   &kp X &kp C &kp L &kp D  &kp G                  &mm_minus_under  &kp U          &kp O  &kp Y       &kp K
//╰─────┴─────┴─╮                                ││                          ╭───┴──────┴───────────┴──────╯
                 &kp LSHFT  &rep_capsw_l CMD 0     &mm_spc_bspc     &mm_l0_l1
//              ╰─────────┴──────────────────────╯╰───────────────┴──────────╯
            >;
         };
      };
   };

// Defines the LTO key, which is
// REPEAT on tap
// Caps Word on Shift-tap
// and momentary layer (&mo) on hold
   MOD_MORPH(rep_capsw, &key_repeat, &caps_word, MOD_LSFT|MOD_RSFT)
 / {
   behaviors {
        rep_capsw_l: rep_capsw_l {
            compatible = "zmk,behavior-hold-tap";
            label = "rep_capsw_l";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&mm_rep_capsw>;
        };
    };
};

   CHORD(QU, &kp Q &kp U, LTP LTR)
   MOD_MORPH(comma_semi, &kp COMMA, &kp SEMICOLON, MOD_LSFT|MOD_RSFT)
   MOD_MORPH(spc_bspc, &kp SPACE, &kp BACKSPACE, MOD_LSFT|MOD_RSFT)
   MOD_MORPH(l0_l1, &to 0, &to 1, MOD_LSFT|MOD_RSFT)
   MOD_MORPH(minus_under, &kp MINUS, &kp UNDERSCORE, MOD_LSFT|MOD_RSFT)
   MOD_MORPH(slh_pipe, &kp SLASH, &kp PIPE, MOD_LSFT|MOD_RSFT)
   MOD_MORPH(dot_colon, &kp DOT, &kp COLON, MOD_LSFT|MOD_RSFT)
   MOD_MORPH(quotes, &kp SQT, &kp DQT, MOD_LSFT|MOD_RSFT)

   //Umlaute
   MACRO(m_shift_ae, &kp LA(U) &kp LS(A))
   MACRO(m_ae, &kp LA(U) &kp A)
   MOD_MORPH(ae, &macro_m_ae, &macro_m_shift_ae, MOD_LSFT|MOD_RSFT)
   COMBO(ae, &mm_ae, P_A P_E)

   MACRO(m_shift_oe, &kp LA(U) &kp LS(O))
   MACRO(m_oe, &kp LA(U) &kp O)
   MOD_MORPH(oe, &macro_m_oe, &macro_m_shift_oe, MOD_LSFT|MOD_RSFT)
   COMBO(oe, &mm_oe, P_O P_E)

   MACRO(m_shift_ue, &kp LA(U) &kp LS(U))
   MACRO(m_ue, &kp LA(U) &kp U)
   MOD_MORPH(ue, &macro_m_ue, &macro_m_shift_ue, MOD_LSFT|MOD_RSFT)
   COMBO(ue, &mm_ue, P_U P_E)
   //ß
   CHORD(ss, &kp LA(S), P_S P_REP)
   
   //tap dance auto shift
//   TAP_DANCE_SHIFT(B)
//  TAP_DANCE(B, <&kp B>, <&kp LS(B)>)
